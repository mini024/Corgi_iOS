<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Test Factorial Recursive </key>
	<string>corgi facR;
        
func fac(n : Int) -&gt; Int {
        var res:Int;
        var temp:Int;
        res = 0;

        case {
        		n &lt;= 0: res = 1;
       		 | else :
        			res = fac(n-1);
			res = n * res;
        }
        return res;
}
        
corgiRun() {
        var f:Int;
        f = fac(9);
        write(f);
}</string>
	<key>Test Fibonacci Recursive </key>
	<string>corgi fibR;

func fib(n : Int) -&gt; Int {
	var res:Int;
	var temp:Int;

	res = 0;
	case {
		n &lt;= 1: res = n;
		| else : 
			res = fib(n-1);
			temp = fib(n-2);
			res = res + temp;
	}
	return res;
}

corgiRun() {
  var f:Int;
  f = fib(9);
  write(f);
}</string>
	<key>Test Bubble sort</key>
	<string>corgi sort;
var i: Int;
var j: Int;
var n: Int;
var arrA: Int[5];
var temp: Int;


func bubbleSort(n : Int) -&gt; void {
  
  for i in 0...n-1 by 1{
    for j in 0...n-i-1 by 1{
      case {
        arrA[j]&gt;arrA[j+1]: 
          temp = arrA[j];
          arrA[j] = arrA[j+1];
          arrA[j+1] = temp;
      }
    }
    j = 0;
  }
  i = 0;
}

corgiRun() {
  i = 0;
  j = 0;
  n = 5;
  arrA[0] = 5;
  arrA[1] = 1;
  arrA[2] = 4;
  arrA[3] = 2;
  arrA[4] = 8;

  bubbleSort(n);

  for i in 0...n by 1{
    	j = arrA[i]; 
	write(j);
  }
  
}</string>
	<key>Test Factorial</key>
	<string>corgi testFactorial;

func factorial(n:Int) -&gt; Int{
	var fact:Int;
	var i: Int;
	fact = 1;
	i = 1;
	for i in 0...n by 1 {
		fact = fact * i;
	}
	return fact;
}

corgiRun() { 
	var fact:Int;
	fact = factorial(10);
	write(fact);
}</string>
	<key>Test Fibonacci</key>
	<string>corgi testFibonacci;

corgiRun() { 
	var n:Int;
	var i: Int;
	var x: Int;
	var x2: Int;
	var term: Int;
	term = 0;
	x = 0;
	x2 = 1;
	n = 4;
	i = 1;

	for i in 0...n by 1 {
		case {
			i == 1: write(x);
			| i == 2: write(x2);
			| else: 
				term = x + x2; 
				x = x2; 
				x2 = term; 
				write(term);
		}
	}
} </string>
	<key>Test Functions</key>
	<string>corgi test;
var i: Int;
var j: Int;

func uno(a:Int) -&gt; void { 
	var n : Int;
	n = a * 2; 
	case {  
		n &lt; a+4 : uno(a+1); 
	}
	write(i);
}

func dos(b:Int) -&gt; Int {
	b = b * i + j; 
	return (b*2);
}

corgiRun() { 
	i = 2;
	j = i * 2 - 1;
	uno(j);
	i = dos(i+j);
}</string>
	<key>Test Case</key>
	<string>corgi test;
var a : Int;
var b : Int;
var c : Int;
corgiRun() {
a = 2;
b = 3;
c = 1;
  case {
    a&gt;b: write(a);
    |a&gt;c: write(b);
    |else: write(c);
  }
}</string>
	<key>Test Loops</key>
	<string>corgi test;
var a : Int;

corgiRun() {
	a = 0;
	for a in 0...10 by 1 {
		write(&quot;Hello&quot;);
	}
}</string>
	<key>Test Assigments</key>
	<string>corgi test;
var a : Int;
var b : Int;
var c : Int;
corgiRun() {
a = 2;
b = 3;
c = 1;
}</string>
	<key>Test Arrays</key>
	<string>corgi test;
var arrA: Int[5];
var a: Int;
var b: Int;

corgiRun() {
  a = 2;
  b = 1;
  arrA[0]=3;
  arrA[a+b] = a;
  b = arrA[arrA[0]] + a;
  write (b);
} </string>
</dict>
</plist>
