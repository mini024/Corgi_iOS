%{

#import "DataBridge.h"
#define YYERROR_VERBOSE 1

int yylex(void);

void yyerror(char *s);

extern FILE *yyin;
extern int yylineno;
%}

%union
{
    float fval;
    int ival;
    char *strval;
    bool bval;
}

%locations
%error-verbose

// Tokens
%token <fval> FLOAT;
%token <ival> INT;
%token FOR;
%token BY;
%token IN;
%token ELSE;
%token WHILE;
%token <strval> BOOLEAN;
%token CASE_OR;
%token CORGI;
%token <strval> CORGIRUN;
%token CASE;
%token SLFT_BRA;
%token SRGT_BRA;
%token FOR_RANGE;
%token <strval> ID;
%token VAR;
%token LFT_PAR;
%token RGT_PAR;
%token SEMICOLON;
%token EQUAL;
%token COMMA;
%token COM_OP;
%token LOG_OP;
%token LFT_BRA;
%token RGT_BRA;
%token COLON;
%token <strval> STRING;
%token WRITE;
%token FUNC;
%token ARROW;
%token RETURN;
%token <strval> TYPE;
%token LOW_OP;
%token GRT_OP;
%token NOT_EQ;
%token LOW_EQ;
%token GRT_EQ;
%token EQ_EQ;
%token AND_OP;
%token OR_OP;
%token <strval> SUM;
%token <strval> SUBTRACTION;
%token <strval> PRODUCT;
%token <strval> DIVISION;
%token <strval> POW;
%token <strval> MOD;

%type <strval> id
%type <ival> tipoAux

%%
// MARK: Program
program:
CORGI ID SEMICOLON {
    // Create Corgi program function
    if (!findFunctionBlock([NSString stringWithFormat:@"%s", $2])) {
        addCorgiFunctionBlock([NSString stringWithFormat:@"%s", $2], @"Corgi");
    } else {
        ParseTestFailBlock([NSString stringWithFormat:@"Redeclaration of function \"%s\", line %d \n", $2, getLineNumber()]);
    }
    
    // Create goTo -> CorgiRun Quadruple
    generateGOTOquadrupleBlock(3);
} vars functions corgirun
;

// MARK: Main Function
corgirun:
CORGIRUN LFT_PAR RGT_PAR LFT_BRA {
    if (!addCorgiFunctionBlock([NSString stringWithFormat:@"%s", $1], @"corgiRun")) {
        ParseTestFailBlock([NSString stringWithFormat:@"Redeclaration of function \"%s\", line %d \n", $1, getLineNumber()]);
    }
} vars estatutos RGT_BRA {
    // EndFunc quadruple
    generateEndOfFunctionQuadrupleBlock();
    generateEndOfProgramQuadrupleBlock();
}
;

// MARK: Functions
functions:
function functions
| /*epsilon*/
;

function:
FUNC ID {
    // Create Function with id
    if (!findFunctionBlock([NSString stringWithFormat:@"%s", $2])) {
        addFunctionWithIdBlock([NSString stringWithFormat:@"%s", $2]);
    } else {
        ParseTestFailBlock([NSString stringWithFormat:@"Redeclaration of function \"%s\", line %d \n", $2, getLineNumber()]);
    }
} LFT_PAR parameters RGT_PAR ARROW TYPE {
    // Add return type to function
    if (findFunctionBlock([NSString stringWithFormat:@"%s", $2])) {
        addFunctionReturnTypeBlock([NSString stringWithFormat:@"%s", $2],[NSString stringWithFormat:@"%s", $8]);
    } else {
        ParseTestFailBlock([NSString stringWithFormat:@"Function \"%s\" doesn't exist, line %d \n", $2, getLineNumber()]);
    }
} bloque {
    // EndFunc quadruple
    generateEndOfFunctionQuadrupleBlock();
}
;

return:
RETURN Megaexpresion SEMICOLON {
    if (!generateReturnBlock()) {
         ParseTestFailBlock([NSString stringWithFormat:@"Wrong return type, line %d \n", getLineNumber()]);
    }
}
| /*epsilon*/ {
    // Verify that function has void return
    if (!generateVoidReturnBlock()) {
        ParseTestFailBlock([NSString stringWithFormat:@"Wrong/missing return type, line %d \n", getLineNumber()]);
    }
}
;

parameters:
ID COLON TYPE{
    // Store parameter
    if (!findParameterBlock([NSString stringWithFormat:@"%s", $1])) {
        addVariableBlock([NSString stringWithFormat:@"%s", $1],[NSString stringWithFormat:@"%s", $3], true);
    } else {
        ParseTestFailBlock([NSString stringWithFormat:@"Redeclaration of variable \"%s\" in line %d \n", $1, getLineNumber()]);
    }
} parameterAux
| /*epsilon*/
;

parameterAux:
COMMA parameters
| /*epsilon*/
;

bloque:
LFT_BRA vars estatutos return RGT_BRA
;

llamada:
ID {
    if (findFunctionBlock([NSString stringWithFormat:@"%s", $1])) {
        // Generate ERA with id
        generateERAQuadrupleBlock([NSString stringWithFormat:@"%s", $1]);
    } else {
        ParseTestFailBlock([NSString stringWithFormat:@"Function \"%s\" doesn't exist in line %d \n", $1, getLineNumber()]);
    }
} LFT_PAR llamadaParametros RGT_PAR SEMICOLON {
    //GoSub quadruple
    if (!generateGoSubQuadrupleBlock(@"llamada")) {
        ParseTestFailBlock([NSString stringWithFormat:@"Wrong number of arguments in function call in line %d \n", getLineNumber()]);
    }
}
;

llamadaParametros:
Megaexpresion {
    // Send param/ save param quadruple
    if (!generateParameterQuadrupleBlock(@"parametro")) {
        ParseTestFailBlock([NSString stringWithFormat:@"Verify argument type, line %d \n", getLineNumber()]);
    }
} llamadaParametrosAux
| /*epsilon*/
;

llamadaParametrosAux:
COMMA Megaexpresion {
    // Send param/ save param quadruple
    if (!generateParameterQuadrupleBlock(@"parametro")) {
        ParseTestFailBlock([NSString stringWithFormat:@"Verify that argument exist and has right type, line %d \n", getLineNumber()]);
    }
} llamadaParametros
| /*epsilon*/
;

// MARK: Variables
vars:
var vars
| /*epsilon*/
;

var:
VAR ID COLON TYPE tipoAux {
    if (strcmp($4, "Void") == 0 || strcmp($4, "void") == 0) {
        ParseTestFailBlock([NSString stringWithFormat:@"Variable \"%s\" can't be type void in line %d \n", $2, getLineNumber()]);
    }
    
    } SEMICOLON {
    if (!findVariableBlock([NSString stringWithFormat:@"%s", $2]) && $5 == 0) {
        addVariableBlock([NSString stringWithFormat:@"%s", $2],[NSString stringWithFormat:@"%s", $4], false);
    } else if (!findVariableBlock([NSString stringWithFormat:@"%s", $2]) && $5 > 0) { // ARRAYS PARSING
        addArrayVariableBlock([NSString stringWithFormat:@"%s", $2],[NSString stringWithFormat:@"%s", $4], $5);
    } else {
        ParseTestFailBlock([NSString stringWithFormat:@"Redeclaration of variable \"%s\" in line %d \n", $2, getLineNumber()]);
    }
}
;

id:
ID {
    if (findVariableBlock([NSString stringWithFormat:@"%s", $1]) && !findFunctionBlock([NSString stringWithFormat:@"%s", $1])) {
        addIdToStackBlock([NSString stringWithFormat:@"%s", $1], @"Variable");
    } else if (findFunctionBlock([NSString stringWithFormat:@"%s", $1])) {
        // Generate ERA with id
        generateERAQuadrupleBlock([NSString stringWithFormat:@"%s", $1]);
    } else {
        ParseTestFailBlock([NSString stringWithFormat:@"Variable/Function with id \"%s\" doesn't exist, line %d \n", $1, getLineNumber()]);
    }
} idAux
;

idAux:
SLFT_BRA {
    if (!checkIfArrayBlock()) {
        ParseTestFailBlock([NSString stringWithFormat:@"Variable is not an Array in line %d \n", getLineNumber()]);
    }
} exp {checkRangeforArrayExpresionBlock();} SRGT_BRA {
    if (!addSizeGaptoBaseAddressBlock()) {
        ParseTestFailBlock([NSString stringWithFormat:@"Index in array should be an Integer line %d \n", getLineNumber()]);
    }
}
| LFT_PAR Megaexpresion {
    // Send param/ save param quadruple
    if (!generateParameterQuadrupleBlock(@"parametro")) {
        ParseTestFailBlock([NSString stringWithFormat:@"Verify argument type, line %d \n", getLineNumber()]);
    }
} llamadaParametros RGT_PAR {
    //GoSub quadruple
    if (!generateGoSubQuadrupleBlock(@"llamada")) {
        ParseTestFailBlock([NSString stringWithFormat:@"Wrong number of arguments in function call in line %d \n", getLineNumber()]);
    }
}
| /*epsilon*/
;

asignacion:
id EQUAL {
    addOperatorToStackBlock(@"=");
} Megaexpresion {
    if (!checkNextOperatorBlock(@"assignation"))
    ParseTestFailBlock([NSString stringWithFormat:@"Operation not valid, check data types, line %d \n", getLineNumber()]);
} SEMICOLON
;

tipoAux: // ARRAYS
SLFT_BRA INT SRGT_BRA {
    $$ = $2;
}
| /*epsilon*/ { $$ = 0;}
;

constante:
INT {addIdToStackBlock([NSString stringWithFormat:@"%d", $1], @"Int");}
| FLOAT { addIdToStackBlock([NSString stringWithFormat:@"%f", $1], @"Float");}
| STRING {
    addIdToStackBlock([NSString stringWithFormat:@"%s", $1], @"String");
}
| BOOLEAN {
    addIdToStackBlock([NSString stringWithFormat:@"%s", $1], @"Bool");
}
| id
;

estatutos:
estatuto estatutos
| /*epsilon*/
;

estatuto:
asignacion
| condicion
| loop
| write
| llamada
;

// MARK: I/O Functions
write:
WRITE LFT_PAR expresion {
    generateWritequadrupleBlock();
} writeAux RGT_PAR SEMICOLON
;

writeAux:
',' expresion {
    generateWritequadrupleBlock();
} writeAux
| /*epsilon*/
;

// MARK: Conditionals
condicion:
CASE LFT_BRA Megaexpresion {
    generateGOTOFquadrupleBlock(0);
} COLON estatutos {
    generateGOTOquadrupleBlock(0);
} conditionAux RGT_BRA {
    fillEndConditionQuadrupleBlock();
}
;

conditionAux:
CASE_OR condicion2
| /*epsilon*/
;

condicion2:
expresion {
    generateGOTOFquadrupleBlock(0);
} COLON estatutos {
    generateGOTOquadrupleBlock(0);
} conditionAux
| conditionElse
;

conditionElse:
ELSE COLON estatutos {
    fillEndConditionQuadrupleBlock();
}
| /*epsilon*/
;

// MARK: Loops
loop:
FOR ID {
    if (findVariableBlock([NSString stringWithFormat:@"%s", $2])) {
        addIdToStackBlock([NSString stringWithFormat:@"%s", $2], @"Variable");
    } else {
        ParseTestFailBlock([NSString stringWithFormat:@"Variable with name \"%s\" doesn't exist, line %d\n", $2, getLineNumber()]);
    }
} IN exp FOR_RANGE exp BY {
    if (!generateLoopConditionQuadruplesBlock()) {
        ParseTestFailBlock([NSString stringWithFormat:@"Variable and Range must be Integers, line %d\n", getLineNumber()]);
    }
    generateGOTOFquadrupleBlock(0);
} exp LFT_BRA estatutos RGT_BRA {
    if (!generateByQuadrupleBlock()) {
        ParseTestFailBlock([NSString stringWithFormat:@"By value must be an Integer, line %d\n", getLineNumber()]);
    }
    generateGOTOquadrupleBlock(1);
    fillEndLoopQuadrupleBlock();
}
| WHILE LFT_PAR {
    generateWhileConditionQuadrupleBlock();
} expresion {
    generateGOTOFquadrupleBlock(1);
} RGT_PAR LFT_BRA estatutos RGT_BRA {
    generateGOTOquadrupleBlock(1);
    fillEndLoopQuadrupleBlock();
}
;

// MARK: Expresions
Megaexpresion:
expresion {
    if (!checkNextOperatorBlock(@"logical"))
    ParseTestFailBlock([NSString stringWithFormat:@"Operation not valid, check data types, line %d\n", getLineNumber()]);
} Superexpresion {
    if (!checkNextOperatorBlock(@"logical"))
    ParseTestFailBlock([NSString stringWithFormat:@"Operation not valid, check data types, line %d \n", getLineNumber()]);
}
;

Superexpresion:
AND_OP {addOperatorToStackBlock(@"&&");} expresion
| OR_OP {addOperatorToStackBlock(@"||");} expresion
| /*epsilon*/
;

expresion:
exp {
    if (!checkNextOperatorBlock(@"relational"))
        ParseTestFailBlock([NSString stringWithFormat:@"Operation not valid, check data types, line %d \n", getLineNumber()]);
} expresion2 {
    if (!checkNextOperatorBlock(@"relational"))
    ParseTestFailBlock([NSString stringWithFormat:@"Operation not valid, check data types, line %d \n", getLineNumber()]);
}
;

expresion2:
LOW_OP {addOperatorToStackBlock(@"<");} exp 
| GRT_OP {addOperatorToStackBlock(@">");} exp
| NOT_EQ {addOperatorToStackBlock(@"!=");} exp
| LOW_EQ {addOperatorToStackBlock(@"<=");} exp
| GRT_EQ {addOperatorToStackBlock(@">=");} exp
| EQ_EQ {addOperatorToStackBlock(@"==");} exp
| /*epsilon*/
;

exp:
termino {
    if (!checkNextOperatorBlock(@"exp"))
        ParseTestFailBlock([NSString stringWithFormat:@"Operation not valid, check data types, line %d \n", getLineNumber()]);
} exp2
;

exp2:
SUM { addOperatorToStackBlock(@"+"); } exp
| SUBTRACTION {addOperatorToStackBlock(@"-");} exp
| /*epsilon*/
;

termino:
factor {
    if (!checkNextOperatorBlock(@"term"))
        ParseTestFailBlock([NSString stringWithFormat:@"Operation not valid, check data types, line %d \n", getLineNumber()]);
} termino2
;

termino2:
PRODUCT {addOperatorToStackBlock(@"*");} termino
| DIVISION {addOperatorToStackBlock(@"/");} termino
| POW {addOperatorToStackBlock(@"^");} termino
| MOD {addOperatorToStackBlock(@"%");} termino
| /*epsilon*/
;

factor:
LFT_PAR {addOperatorToStackBlock(@"(");} expresion RGT_PAR {deleteParentesisFromStackBlock();}
| constante
;

%%

;
;
;
;
