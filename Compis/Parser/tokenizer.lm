%{

#import "DataBridge.h"
#import "y.tab.h"

void yyerror(char *s);
    
%}

%%

[0-9]+(\.[0-9]+)   {yylval.fval=atof(yytext);   return FLOAT;}
[0-9]+ {yylval.ival=atoi(yytext);   return INT;}
for {return FOR;}
in {return IN;}
by {return BY;}
else {return ELSE;}
while {return WHILE;}
write {return WRITE;}
return {return RETURN;}
true|false {return BOOLEAN;}
corgiRun {return CORGIRUN;}
corgi {return CORGI;}
var {return VAR;}
func { return FUNC;}
case {return CASE;}
Int|Float|Bool|String|Void|int|float|bool|String|void {yylval.strval= strdup(yytext); return TYPE;}
[a-zA-Z][a-zA-Z0-9]* {yylval.strval= strdup(yytext); return ID;}
\( {return LFT_PAR;}
\) {return RGT_PAR;}
[;] {return SEMICOLON;}
: {return COLON;}
\= {return EQUAL;}
\.\.\. {return FOR_RANGE;}
\| {return CASE_OR;}

\< {return LOW_OP;}
\> {return GRT_OP;}
\!\= {return NOT_EQ;}
\<\= {return LOW_EQ;}
\>\= {return GRT_EQ;}
\=\= {return EQ_EQ;}

\&\& {return AND_OP;}
\|\| {return OR_OP;}

\{ {return LFT_BRA;}
\} {return RGT_BRA;}
\[ {return SLFT_BRA;}
\] {return SRGT_BRA;}
\-\> { return ARROW;}
\+ {return SUM;}
\- {return SUBTRACTION;}
\/ {return DIVISION;}
\* {return PRODUCT;}
\% {return MOD;}
\^ {return POW;}

[ \t]   ;
\n   {addLineCounterBlock();}
.   {return  yytext[0];}
\".*\" {yylval.strval= strdup(yytext); return STRING;}

%%

int yywrap() 
{
    // This is a place where one can append more text if it would be needed, quit for now
    return 1;
}

void yyerror(char *s) 
{
    if (ParseTestFailBlock)
        ParseTestFailBlock([NSString stringWithFormat:@"Unexpected %s, line %d \n",yytext, getLineNumber()]);
        EndBlock();
}
