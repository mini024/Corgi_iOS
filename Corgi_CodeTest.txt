// ASIGNATIONS

corgi test;
var a : Int;
var b : Int;
var c : Int;
corgiRun() {
a = 2;
b = 3;
c = 1;
}

// CONDITIONAL
corgi test;
var a : Int;
var b : Int;
var c : Int;
corgiRun() {
a = 2;
b = 3;
c = 1;
  case {
    a>b: write(a);
    |a>c: write(b);
    |else: write(c);
  }
}

// READ - write

corgi test;
var a : Int;
var b : Int;
var c : Int;
corgiRun() {
a = 2;
b = 3;
write(a+b);
c = 1;
}

// LOOPS

corgi test;
var a : Int;
corgiRun() {
  a = 0;
  for a in 0...10 by 1 {
    write("Hello");
  }
}

// FUNCTIONS

corgi test;
var i: Int;
var j: Int;

func uno(a:Int) -> void {
  var n : Int;
  n = a * 2;
  case {
    n < a+4 : 
      uno(a+1);
   | else : write(i);
  }
  return;
}

func dos(b:Int) -> Int {
  b = b * i + j;
  return (b*2);
}

corgiRun() {
  i = 2;
  j = i * 2 - 1;
  uno(j);
  write (i + dos(i+j));
}

// ARRAYS

corgi test;
var arrA: Int[5];
var a: Int;
var b: Int;

corgiRun() {
  a = 2;
b = 1;
  arrA[a+b] = a;
  b = arrA[3] + a;
  write (b);
}

// Fiboacci 

corgi testFibonacci;

corgiRun() { 
	var n:Int;
	var i: Int;
	var x: Int;
	var x2: Int;
	var term: Int;
	term = 0;
	x = 0;
	x2 = 1;
	n = 4;
	i = 1;

	for i in 0...n by 1 {
		case {
			i == 1: write(x);
			| i == 2: write(x2);
			| else: 
				term = x + x2; 
				x = x2; 
				x2 = term; 
				write(term);
		}
	}
} 

// Factorial 

corgi testFactorial;

corgiRun() { 
	var fact:Int;
	var i: Int;
	fact = 1;
	i = 1;
	for i in 0...10 by 1 {
		fact = fact * i;
	}
	write(fact);
} 

