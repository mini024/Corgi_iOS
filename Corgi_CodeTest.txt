// ASIGNATIONS

corgi test;
var a : Int;
var b : Int;
var c : Int;
corgiRun() {
a = 2;
b = 3;
c = 1;
}

// CONDITIONAL
corgi test;
var a : Int;
var b : Int;
var c : Int;
corgiRun() {
a = 2;
b = 3;
c = 1;
  case {
    a>b: write(a);
    |a>c: write(b);
    |else: write(c);
  }
}

// READ - write

corgi test;
var a : Int;
var b : Int;
var c : Int;
corgiRun() {
a = 2;
b = 3;
write(a+b);
c = 1;
}

// LOOPS

corgi test;
var a : Int;
corgiRun() {
  a = 0;
  for a in 0...10 by 1 {
    write("Hello");
  }
}

// FUNCTIONS

corgi test;
var i: Int;
var j: Int;

func uno(a:Int) -> void {
  var n : Int;
  n = a * 2;
  case {
    n < a+4 : 
      uno(a+1);
   | else : write(i);
  }
  return;
}

func dos(b:Int) -> Int {
  b = b * i + j;
  return (b*2);
}

corgiRun() {
  i = 2;
  j = i * 2 - 1;
  uno(j);
  write (i + dos(i+j));
}

// ARRAYS

corgi test;
var arrA: Int[5];
var a: Int;
var b: Int;

corgiRun() {
  a = 2;
b = 1;
  arrA[a+b] = a;
  b = arrA[3] + a;
  write (b);
}

// Fiboacci 

corgi testFibonacci;

corgiRun() { 
	var n:Int;
	var i: Int;
	var x: Int;
	var x2: Int;
	var term: Int;
	term = 0;
	x = 0;
	x2 = 1;
	n = 4;
	i = 1;

	for i in 0...n by 1 {
		case {
			i == 1: write(x);
			| i == 2: write(x2);
			| else: 
				term = x + x2; 
				x = x2; 
				x2 = term; 
				write(term);
		}
	}
} 

// Fibonacci Recursive

corgi fibR;

func fib(n : Int) -> Int {
	var res:Int;
	var temp:Int;

	res = 0;
	case {
		n <= 1: res = n;
		| else : 
			res = fib(n-1);
			temp = fib(n-2);
			res = res + temp;
	}
	return res;
}

corgiRun() {
  var f:Int;
  f = fib(9);
  write(f);
}

// Factorial 

corgi testFactorial;

corgiRun() { 
	var fact:Int;
	var i: Int;
	fact = 1;
	i = 1;
	for i in 0...10 by 1 {
		fact = fact * i;
	}
	write(fact);
} 

// Factorial recursive

corgi facR;
        
func fac(n : Int) -> Int {
        var res:Int;
        var temp:Int;
        res = 0;

        case {
        		n <= 0: res = 1;
       		 | else :
        			res = fac(n-1);
			res = n * res;
        }
        return res;
}
        
corgiRun() {
        var f:Int;
        f = fac(9);
        write(f);
}

// SORT - Bubble sort algorithm

corgi sort;
var i: Int;
var j: Int;
var n: Int;
var arrA: Int[5];
var temp: Int;


func bubbleSort(n : Int) -> void {
  
  for i in 0...n-1 by 1{
    for j in 0...n-i-1 by 1{
      case {
        arrA[j]>arrA[j+1]: 
          temp = arrA[j];
          arrA[j] = arrA[j+1];
          arrA[j+1] = temp;
      }
    }
  }
}

corgiRun() {
  i = 0;
  j = 0;
  n = 5;
  arrA[0] = 5;
  arrA[1] = 1;
  arrA[2] = 4;
  arrA[3] = 2;
  arrA[4] = 8;

  bubbleSort(n);

  for i in 0...n-1 by 1{
    	j = arrA[i]; 
	write(j);
  }
  
}
